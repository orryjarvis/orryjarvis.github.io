{"version":3,"sources":["webpack:///./src/templates/BlogPost.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/menu.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","d","postQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_components_seo__WEBPACK_IMPORTED_MODULE_4__","BlogPost","_ref","post","data","markdownRemark","a","createElement","title","frontmatter","keywords","to","date","dangerouslySetInnerHTML","__html","html","propTypes","PropTypes","any","StaticQuery","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","query","render","children","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","SEO","description","lang","meta","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","array","arrayOf","Header","siteTitle","react_default","style","background","margin","maxWidth","padding","gatsby_browser_entry","color","textDecoration","Menu","paddingTop","listStyle","display","justifyContent","Layout","Fragment","header","menu","textAlign","_755544856","node"],"mappings":"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","file":"component---src-templates-blog-post-js-ceab36086daff944fda1.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, graphql } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n\nconst BlogPost = ({ data }) => {\n  const post = data.markdownRemark;\n\n  return (\n    <Layout>\n      <SEO\n        title={post.frontmatter.title}\n        keywords={[`gatsby`, `application`, `react`]}\n      />\n      <Link to=\"/blog\">Go Back</Link>\n      <hr />\n      <h1>{post.frontmatter.title}</h1>\n      <h4>Posted on {post.frontmatter.date}</h4>\n      <div dangerouslySetInnerHTML={{ __html: post.html }} />\n    </Layout>\n  );\n};\n\nBlogPost.propTypes = {\n  data: PropTypes.any,\n};\n\nexport const postQuery = graphql`\n  query BlogPostByPath($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        path\n        title\n        date\n      }\n    }\n  }\n`;\n\nexport default BlogPost;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { StaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description;\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`;\n","import { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `#4A86E8`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n);\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default Header;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nconst Menu = () => {\n  return (\n    <div\n      style={{\n        background: `#f0f0f0`,\n        paddingTop: '10px',\n      }}\n    >\n      <ul\n        style={{\n          listStyle: 'none',\n          display: 'flex',\n          justifyContent: 'space-evenly',\n        }}\n      >\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/blog\">Blog</Link>\n        </li>\n        <li>\n          <Link to=\"/social\">Social</Link>\n        </li>\n        <li>\n          <Link to=\"/about\">About</Link>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Menu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StaticQuery, graphql } from 'gatsby';\n\nimport Header from './header';\nimport Menu from './menu';\nimport './layout.css';\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <Menu />\n        <div\n          style={{\n            margin: `0 auto`,\n            maxWidth: 960,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n          }}\n        >\n          <main>{children}</main>\n          <footer>\n            <p\n              style={{\n                textAlign: 'right',\n              }}\n            >\n              Observations by Orry Jarvis\n            </p>\n          </footer>\n        </div>\n      </>\n    )}\n  />\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n"],"sourceRoot":""}